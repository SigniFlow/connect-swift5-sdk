//
// SigningCeremonyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class SigningCeremonyAPI {
    /**
     Multiple Signers Signing Ceremony
     
     - parameter contentType: (header)  
     - parameter multipleSignersSigningCeremonyRequest: (body) ##### Multiple Signers Signing Ceremony Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMultipleSignersSigningCeremony(contentType: String, multipleSignersSigningCeremonyRequest: MultipleSignersSigningCeremonyRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MultipleSignersSigningCeremonyResponse?, _ error: Error?) -> Void)) {
        postMultipleSignersSigningCeremonyWithRequestBuilder(contentType: contentType, multipleSignersSigningCeremonyRequest: multipleSignersSigningCeremonyRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Multiple Signers Signing Ceremony
     - POST /MultipleSignersSigningCeremony
     - #### Used when there are multiple signers on a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter multipleSignersSigningCeremonyRequest: (body) ##### Multiple Signers Signing Ceremony Request Model (optional)
     - returns: RequestBuilder<MultipleSignersSigningCeremonyResponse> 
     */
    open class func postMultipleSignersSigningCeremonyWithRequestBuilder(contentType: String, multipleSignersSigningCeremonyRequest: MultipleSignersSigningCeremonyRequest? = nil) -> RequestBuilder<MultipleSignersSigningCeremonyResponse> {
        let path = "/MultipleSignersSigningCeremony"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: multipleSignersSigningCeremonyRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<MultipleSignersSigningCeremonyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Signing Ceremony V2
     
     - parameter contentType: (header)  
     - parameter signingCeremonyV2Request: (body) ##### Signing Ceremony V2 Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSigningCeremonyV2(contentType: String, signingCeremonyV2Request: SigningCeremonyV2Request? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SigningCeremonyV2Response?, _ error: Error?) -> Void)) {
        postSigningCeremonyV2WithRequestBuilder(contentType: contentType, signingCeremonyV2Request: signingCeremonyV2Request).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Signing Ceremony V2
     - POST /SigningCeremonyV2
     - #### Used to initiate the signing process of a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter signingCeremonyV2Request: (body) ##### Signing Ceremony V2 Request Model (optional)
     - returns: RequestBuilder<SigningCeremonyV2Response> 
     */
    open class func postSigningCeremonyV2WithRequestBuilder(contentType: String, signingCeremonyV2Request: SigningCeremonyV2Request? = nil) -> RequestBuilder<SigningCeremonyV2Response> {
        let path = "/SigningCeremonyV2"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signingCeremonyV2Request)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SigningCeremonyV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
