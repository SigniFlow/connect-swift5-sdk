//
// ViewersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ViewersAPI {
    /**
     Get Document Link
     
     - parameter contentType: (header)  
     - parameter getDocLinkRequest: (body) ##### Get Document Link Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGetDocLink(contentType: String, getDocLinkRequest: GetDocLinkRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetDocLinkResponse?, _ error: Error?) -> Void)) {
        postGetDocLinkWithRequestBuilder(contentType: contentType, getDocLinkRequest: getDocLinkRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Document Link
     - POST /GetDocLink
     - #### Used to get the document link that will be used to sign a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter getDocLinkRequest: (body) ##### Get Document Link Request Model (optional)
     - returns: RequestBuilder<GetDocLinkResponse> 
     */
    open class func postGetDocLinkWithRequestBuilder(contentType: String, getDocLinkRequest: GetDocLinkRequest? = nil) -> RequestBuilder<GetDocLinkResponse> {
        let path = "/GetDocLink"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDocLinkRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetDocLinkResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Document Prepper Link
     
     - parameter contentType: (header)  
     - parameter getDocumentPrepperLinkRequest: (body) ##### Get Document Prepper Link Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGetDocumentPrepperLink(contentType: String, getDocumentPrepperLinkRequest: GetDocumentPrepperLinkRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetDocumentPrepperLinkResponse?, _ error: Error?) -> Void)) {
        postGetDocumentPrepperLinkWithRequestBuilder(contentType: contentType, getDocumentPrepperLinkRequest: getDocumentPrepperLinkRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Document Prepper Link
     - POST /GetDocumentPrepperLink
     - #### Used to get a document prepper link (url).
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter getDocumentPrepperLinkRequest: (body) ##### Get Document Prepper Link Request Model (optional)
     - returns: RequestBuilder<GetDocumentPrepperLinkResponse> 
     */
    open class func postGetDocumentPrepperLinkWithRequestBuilder(contentType: String, getDocumentPrepperLinkRequest: GetDocumentPrepperLinkRequest? = nil) -> RequestBuilder<GetDocumentPrepperLinkResponse> {
        let path = "/GetDocumentPrepperLink"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDocumentPrepperLinkRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetDocumentPrepperLinkResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
