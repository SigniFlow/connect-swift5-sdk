//
// AuditsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AuditsAPI {
    /**
     Get Audit Document
     
     - parameter contentType: (header)  
     - parameter getAuditDocumentRequest: (body) ##### Get Audit Document Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGetAuditDocument(contentType: String, getAuditDocumentRequest: GetAuditDocumentRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAuditDocumentResponse?, _ error: Error?) -> Void)) {
        postGetAuditDocumentWithRequestBuilder(contentType: contentType, getAuditDocumentRequest: getAuditDocumentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Audit Document
     - POST /GetAuditDocument
     - #### Used to get an audit document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter getAuditDocumentRequest: (body) ##### Get Audit Document Request Model (optional)
     - returns: RequestBuilder<GetAuditDocumentResponse> 
     */
    open class func postGetAuditDocumentWithRequestBuilder(contentType: String, getAuditDocumentRequest: GetAuditDocumentRequest? = nil) -> RequestBuilder<GetAuditDocumentResponse> {
        let path = "/GetAuditDocument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getAuditDocumentRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetAuditDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Document Audit
     
     - parameter contentType: (header)  
     - parameter getDocumentAuditRequest: (body) ##### Get Document Audit Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGetDocumentAudit(contentType: String, getDocumentAuditRequest: GetDocumentAuditRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetDocumentAuditResponse?, _ error: Error?) -> Void)) {
        postGetDocumentAuditWithRequestBuilder(contentType: contentType, getDocumentAuditRequest: getDocumentAuditRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Document Audit
     - POST /GetDocumentAudit
     - #### Used to get the audit information from a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter getDocumentAuditRequest: (body) ##### Get Document Audit Request Model (optional)
     - returns: RequestBuilder<GetDocumentAuditResponse> 
     */
    open class func postGetDocumentAuditWithRequestBuilder(contentType: String, getDocumentAuditRequest: GetDocumentAuditRequest? = nil) -> RequestBuilder<GetDocumentAuditResponse> {
        let path = "/GetDocumentAudit"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDocumentAuditRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetDocumentAuditResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
