//
// PortfoliosAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class PortfoliosAPI {
    /**
     Create Portfolio
     
     - parameter contentType: (header)  
     - parameter createPortfolioRequest: (body) ##### Create Portfolio Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCreatePortfolio(contentType: String, createPortfolioRequest: CreatePortfolioRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreatePortfolioResponse?, _ error: Error?) -> Void)) {
        postCreatePortfolioWithRequestBuilder(contentType: contentType, createPortfolioRequest: createPortfolioRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Portfolio
     - POST /CreatePortfolio
     - #### Used to create a portfolio to group documents.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter createPortfolioRequest: (body) ##### Create Portfolio Request Model (optional)
     - returns: RequestBuilder<CreatePortfolioResponse> 
     */
    open class func postCreatePortfolioWithRequestBuilder(contentType: String, createPortfolioRequest: CreatePortfolioRequest? = nil) -> RequestBuilder<CreatePortfolioResponse> {
        let path = "/CreatePortfolio"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPortfolioRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CreatePortfolioResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Download Portfolio
     
     - parameter contentType: (header)  
     - parameter downloadPortfolioRequest: (body) ##### Download Portfolio Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDownloadPortfolio(contentType: String, downloadPortfolioRequest: DownloadPortfolioRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DownloadPortfolioResponse?, _ error: Error?) -> Void)) {
        postDownloadPortfolioWithRequestBuilder(contentType: contentType, downloadPortfolioRequest: downloadPortfolioRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download Portfolio
     - POST /DownloadPortfolio
     - #### Used to return a string that is then used to download a portfolio.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter downloadPortfolioRequest: (body) ##### Download Portfolio Request Model (optional)
     - returns: RequestBuilder<DownloadPortfolioResponse> 
     */
    open class func postDownloadPortfolioWithRequestBuilder(contentType: String, downloadPortfolioRequest: DownloadPortfolioRequest? = nil) -> RequestBuilder<DownloadPortfolioResponse> {
        let path = "/DownloadPortfolio"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: downloadPortfolioRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DownloadPortfolioResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Link To Portfolio
     
     - parameter contentType: (header)  
     - parameter linkToPortfolioRequest: (body) ##### Link To Portfolio Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLinkToPortfolio(contentType: String, linkToPortfolioRequest: LinkToPortfolioRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LinkToPortfolioResponse?, _ error: Error?) -> Void)) {
        postLinkToPortfolioWithRequestBuilder(contentType: contentType, linkToPortfolioRequest: linkToPortfolioRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Link To Portfolio
     - POST /LinkToPortfolio
     - #### Used to get the url link to a portfolio.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter linkToPortfolioRequest: (body) ##### Link To Portfolio Request Model (optional)
     - returns: RequestBuilder<LinkToPortfolioResponse> 
     */
    open class func postLinkToPortfolioWithRequestBuilder(contentType: String, linkToPortfolioRequest: LinkToPortfolioRequest? = nil) -> RequestBuilder<LinkToPortfolioResponse> {
        let path = "/LinkToPortfolio"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: linkToPortfolioRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LinkToPortfolioResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Set Document Order
     
     - parameter contentType: (header)  
     - parameter setDocumentOrderRequest: (body) ##### Set Document Order Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSetDocumentOrder(contentType: String, setDocumentOrderRequest: SetDocumentOrderRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SetDocumentOrderResponse?, _ error: Error?) -> Void)) {
        postSetDocumentOrderWithRequestBuilder(contentType: contentType, setDocumentOrderRequest: setDocumentOrderRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set Document Order
     - POST /SetDocumentOrder
     - #### Used to set the order of documents that needs to be signed.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter setDocumentOrderRequest: (body) ##### Set Document Order Request Model (optional)
     - returns: RequestBuilder<SetDocumentOrderResponse> 
     */
    open class func postSetDocumentOrderWithRequestBuilder(contentType: String, setDocumentOrderRequest: SetDocumentOrderRequest? = nil) -> RequestBuilder<SetDocumentOrderResponse> {
        let path = "/SetDocumentOrder"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setDocumentOrderRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SetDocumentOrderResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Share Portfolio
     
     - parameter contentType: (header)  
     - parameter sharePortfolioRequest: (body) ##### Share Portfolio Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSharePortfolio(contentType: String, sharePortfolioRequest: SharePortfolioRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SharePortfolioResponse?, _ error: Error?) -> Void)) {
        postSharePortfolioWithRequestBuilder(contentType: contentType, sharePortfolioRequest: sharePortfolioRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Share Portfolio
     - POST /SharePortfolio
     - #### Used when a user wants to share a portfolio with someone else.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter sharePortfolioRequest: (body) ##### Share Portfolio Request Model (optional)
     - returns: RequestBuilder<SharePortfolioResponse> 
     */
    open class func postSharePortfolioWithRequestBuilder(contentType: String, sharePortfolioRequest: SharePortfolioRequest? = nil) -> RequestBuilder<SharePortfolioResponse> {
        let path = "/SharePortfolio"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sharePortfolioRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SharePortfolioResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Share Portfolio No Email
     
     - parameter contentType: (header)  
     - parameter sharePortfolioNoEmailRequest: (body) ##### Share Portfolio No Email Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSharePortfolioNoEmail(contentType: String, sharePortfolioNoEmailRequest: SharePortfolioNoEmailRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SharePortfolioNoEmailResponse?, _ error: Error?) -> Void)) {
        postSharePortfolioNoEmailWithRequestBuilder(contentType: contentType, sharePortfolioNoEmailRequest: sharePortfolioNoEmailRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Share Portfolio No Email
     - POST /SharePortfolio_No_Email
     - #### Used when a user wants to share a portfolio without sending out an email.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter sharePortfolioNoEmailRequest: (body) ##### Share Portfolio No Email Request Model (optional)
     - returns: RequestBuilder<SharePortfolioNoEmailResponse> 
     */
    open class func postSharePortfolioNoEmailWithRequestBuilder(contentType: String, sharePortfolioNoEmailRequest: SharePortfolioNoEmailRequest? = nil) -> RequestBuilder<SharePortfolioNoEmailResponse> {
        let path = "/SharePortfolio_No_Email"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sharePortfolioNoEmailRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SharePortfolioNoEmailResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
