//
// AuthenticationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AuthenticationAPI {
    /**
     Login
     
     - parameter contentType: (header)  
     - parameter loginRequest: (body) ##### Login Request Model 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(contentType: String, loginRequest: LoginRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LoginResponse?, _ error: Error?) -> Void)) {
        loginWithRequestBuilder(contentType: contentType, loginRequest: loginRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Login
     - POST /Login
     - #### Generates a API Token for the User
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter loginRequest: (body) ##### Login Request Model 
     - returns: RequestBuilder<LoginResponse> 
     */
    open class func loginWithRequestBuilder(contentType: String, loginRequest: LoginRequest) -> RequestBuilder<LoginResponse> {
        let path = "/Login"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LoginResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Logout
     
     - parameter contentType: (header)  
     - parameter logoutRequest: (body) ##### Logout Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postLogout(contentType: String, logoutRequest: LogoutRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LogoutResponse?, _ error: Error?) -> Void)) {
        postLogoutWithRequestBuilder(contentType: contentType, logoutRequest: logoutRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Logout
     - POST /Logout
     - #### Used to log out a user from SigniFlow.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter logoutRequest: (body) ##### Logout Request Model (optional)
     - returns: RequestBuilder<LogoutResponse> 
     */
    open class func postLogoutWithRequestBuilder(contentType: String, logoutRequest: LogoutRequest? = nil) -> RequestBuilder<LogoutResponse> {
        let path = "/Logout"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: logoutRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<LogoutResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Token Extend
     
     - parameter contentType: (header)  
     - parameter tokenExtendRequest: (body) ##### Token Extend Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTokenExtend(contentType: String, tokenExtendRequest: TokenExtendRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenExtendResponse?, _ error: Error?) -> Void)) {
        postTokenExtendWithRequestBuilder(contentType: contentType, tokenExtendRequest: tokenExtendRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Token Extend
     - POST /TokenExtend
     - #### Used to extend the period of time in which the session token is valid.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter tokenExtendRequest: (body) ##### Token Extend Request Model (optional)
     - returns: RequestBuilder<TokenExtendResponse> 
     */
    open class func postTokenExtendWithRequestBuilder(contentType: String, tokenExtendRequest: TokenExtendRequest? = nil) -> RequestBuilder<TokenExtendResponse> {
        let path = "/TokenExtend"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenExtendRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TokenExtendResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Token Validate
     
     - parameter contentType: (header)  
     - parameter tokenValidateRequest: (body) ##### Token Validate Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTokenValidate(contentType: String, tokenValidateRequest: TokenValidateRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenValidateResponse?, _ error: Error?) -> Void)) {
        postTokenValidateWithRequestBuilder(contentType: contentType, tokenValidateRequest: tokenValidateRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Token Validate
     - POST /TokenValidate
     - #### Used to validate the user's session token.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter tokenValidateRequest: (body) ##### Token Validate Request Model (optional)
     - returns: RequestBuilder<TokenValidateResponse> 
     */
    open class func postTokenValidateWithRequestBuilder(contentType: String, tokenValidateRequest: TokenValidateRequest? = nil) -> RequestBuilder<TokenValidateResponse> {
        let path = "/TokenValidate"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenValidateRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<TokenValidateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
