//
// WorkFlowAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class WorkFlowAPI {
    /**
     Create Workflow
     
     - parameter contentType: (header)  
     - parameter createWorkflowRequest: (body) ##### Create Workflow Request Model 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createWorkflow(contentType: String, createWorkflowRequest: CreateWorkflowRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateWorkflowResponse?, _ error: Error?) -> Void)) {
        createWorkflowWithRequestBuilder(contentType: contentType, createWorkflowRequest: createWorkflowRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Workflow
     - POST /CreateWorkflow
     - #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter createWorkflowRequest: (body) ##### Create Workflow Request Model 
     - returns: RequestBuilder<CreateWorkflowResponse> 
     */
    open class func createWorkflowWithRequestBuilder(contentType: String, createWorkflowRequest: CreateWorkflowRequest) -> RequestBuilder<CreateWorkflowResponse> {
        let path = "/CreateWorkflow"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createWorkflowRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CreateWorkflowResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Document
     
     - parameter contentType: (header)  
     - parameter getDocumentRequest: (body) ##### Get Document Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDocument(contentType: String, getDocumentRequest: GetDocumentRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetDocumentResponse?, _ error: Error?) -> Void)) {
        getDocumentWithRequestBuilder(contentType: contentType, getDocumentRequest: getDocumentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Document
     - POST /GetDoc
     - #### Used to download a document from SigniFlow.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter getDocumentRequest: (body) ##### Get Document Request Model (optional)
     - returns: RequestBuilder<GetDocumentResponse> 
     */
    open class func getDocumentWithRequestBuilder(contentType: String, getDocumentRequest: GetDocumentRequest? = nil) -> RequestBuilder<GetDocumentResponse> {
        let path = "/GetDoc"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDocumentRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Add a Workflow step
     
     - parameter contentType: (header)  
     - parameter addWorkflowStepV2Request: (body) ##### Add A Workflow Step Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAddWorkflowStep(contentType: String, addWorkflowStepV2Request: AddWorkflowStepV2Request? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddWokflowStepV2Response?, _ error: Error?) -> Void)) {
        postAddWorkflowStepWithRequestBuilder(contentType: contentType, addWorkflowStepV2Request: addWorkflowStepV2Request).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add a Workflow step
     - POST /AddWorkflowStepV2
     - #### Used to add a step to a document Workflow process.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter addWorkflowStepV2Request: (body) ##### Add A Workflow Step Request Model (optional)
     - returns: RequestBuilder<AddWokflowStepV2Response> 
     */
    open class func postAddWorkflowStepWithRequestBuilder(contentType: String, addWorkflowStepV2Request: AddWorkflowStepV2Request? = nil) -> RequestBuilder<AddWokflowStepV2Response> {
        let path = "/AddWorkflowStepV2"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addWorkflowStepV2Request)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AddWokflowStepV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Cancel Flow
     
     - parameter contentType: (header)  
     - parameter cancelFlowRequest: (body) ##### Cancel Flow Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCancelFlow(contentType: String, cancelFlowRequest: CancelFlowRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CancelFlowResponse?, _ error: Error?) -> Void)) {
        postCancelFlowWithRequestBuilder(contentType: contentType, cancelFlowRequest: cancelFlowRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel Flow
     - POST /CancelFlow
     - #### Used to cancel a document workflow.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter cancelFlowRequest: (body) ##### Cancel Flow Request Model (optional)
     - returns: RequestBuilder<CancelFlowResponse> 
     */
    open class func postCancelFlowWithRequestBuilder(contentType: String, cancelFlowRequest: CancelFlowRequest? = nil) -> RequestBuilder<CancelFlowResponse> {
        let path = "/CancelFlow"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cancelFlowRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CancelFlowResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Delete Document
     
     - parameter contentType: (header)  
     - parameter deleteDocRequest: (body) ##### Delete Document Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDeleteDoc(contentType: String, deleteDocRequest: DeleteDocRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteDocResponse?, _ error: Error?) -> Void)) {
        postDeleteDocWithRequestBuilder(contentType: contentType, deleteDocRequest: deleteDocRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Document
     - POST /DeleteDoc
     - #### This is used to delete a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter deleteDocRequest: (body) ##### Delete Document Request Model (optional)
     - returns: RequestBuilder<DeleteDocResponse> 
     */
    open class func postDeleteDocWithRequestBuilder(contentType: String, deleteDocRequest: DeleteDocRequest? = nil) -> RequestBuilder<DeleteDocResponse> {
        let path = "/DeleteDoc"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteDocRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeleteDocResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Document Prepper Add Fields
     
     - parameter contentType: (header)  
     - parameter docPrepperAddFieldsFlowIDRequest: (body) ##### Document Prepper Add Fields Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDocPrepperAddField(contentType: String, docPrepperAddFieldsFlowIDRequest: DocPrepperAddFieldsFlowIDRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DocPrepperAddFieldsFlowIDResponse?, _ error: Error?) -> Void)) {
        postDocPrepperAddFieldWithRequestBuilder(contentType: contentType, docPrepperAddFieldsFlowIDRequest: docPrepperAddFieldsFlowIDRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Document Prepper Add Fields
     - POST /DocPrepperAddFieldsFlowID
     - #### Used to add fields to a document using the user's FlowID.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter docPrepperAddFieldsFlowIDRequest: (body) ##### Document Prepper Add Fields Request Model (optional)
     - returns: RequestBuilder<DocPrepperAddFieldsFlowIDResponse> 
     */
    open class func postDocPrepperAddFieldWithRequestBuilder(contentType: String, docPrepperAddFieldsFlowIDRequest: DocPrepperAddFieldsFlowIDRequest? = nil) -> RequestBuilder<DocPrepperAddFieldsFlowIDResponse> {
        let path = "/DocPrepperAddFieldsFlowID"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: docPrepperAddFieldsFlowIDRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DocPrepperAddFieldsFlowIDResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Document Prepper Add Advanced Fields
     
     - parameter contentType: (header)  
     - parameter docPrepperAddAdvancedFieldsRequest: (body) ##### Document Prepper Add Advanced Fields Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postDocPrepperAdvancedFields(contentType: String, docPrepperAddAdvancedFieldsRequest: DocPrepperAddAdvancedFieldsRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DocPrepperAddAdvancedFieldsResponse?, _ error: Error?) -> Void)) {
        postDocPrepperAdvancedFieldsWithRequestBuilder(contentType: contentType, docPrepperAddAdvancedFieldsRequest: docPrepperAddAdvancedFieldsRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Document Prepper Add Advanced Fields
     - POST /DocPrepperAdvancedFields
     - #### Used to add advanced fields to a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter docPrepperAddAdvancedFieldsRequest: (body) ##### Document Prepper Add Advanced Fields Request Model (optional)
     - returns: RequestBuilder<DocPrepperAddAdvancedFieldsResponse> 
     */
    open class func postDocPrepperAdvancedFieldsWithRequestBuilder(contentType: String, docPrepperAddAdvancedFieldsRequest: DocPrepperAddAdvancedFieldsRequest? = nil) -> RequestBuilder<DocPrepperAddAdvancedFieldsResponse> {
        let path = "/DocPrepperAdvancedFields"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: docPrepperAddAdvancedFieldsRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DocPrepperAddAdvancedFieldsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     FullWorkflow
     
     - parameter contentType: (header)  
     - parameter fullWorkflowRequest: (body) ##### FullWorkflow Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFullWorkflow(contentType: String, fullWorkflowRequest: FullWorkflowRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: FullWorkflowResponse?, _ error: Error?) -> Void)) {
        postFullWorkflowWithRequestBuilder(contentType: contentType, fullWorkflowRequest: fullWorkflowRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     FullWorkflow
     - POST /FullWorkflow
     - #### Used to create a fullworkflow for a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter fullWorkflowRequest: (body) ##### FullWorkflow Request Model (optional)
     - returns: RequestBuilder<FullWorkflowResponse> 
     */
    open class func postFullWorkflowWithRequestBuilder(contentType: String, fullWorkflowRequest: FullWorkflowRequest? = nil) -> RequestBuilder<FullWorkflowResponse> {
        let path = "/FullWorkflow"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fullWorkflowRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<FullWorkflowResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get Document Status
     
     - parameter contentType: (header)  
     - parameter getDocStatusRequest: (body) ##### Get Document Status Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postGetDocStatus(contentType: String, getDocStatusRequest: GetDocStatusRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetDocStatusResponse?, _ error: Error?) -> Void)) {
        postGetDocStatusWithRequestBuilder(contentType: contentType, getDocStatusRequest: getDocStatusRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Document Status
     - POST /GetDocStatus
     - #### Used to get the status of the document ex. pending/completed/rejected.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter getDocStatusRequest: (body) ##### Get Document Status Request Model (optional)
     - returns: RequestBuilder<GetDocStatusResponse> 
     */
    open class func postGetDocStatusWithRequestBuilder(contentType: String, getDocStatusRequest: GetDocStatusRequest? = nil) -> RequestBuilder<GetDocStatusResponse> {
        let path = "/GetDocStatus"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDocStatusRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<GetDocStatusResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Initiate Flow
     
     - parameter contentType: (header)  
     - parameter initiateFlowRequest: (body) ##### Initiate Flow Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postInitiateFlow(contentType: String, initiateFlowRequest: InitiateFlowRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InitiateFlowResponse?, _ error: Error?) -> Void)) {
        postInitiateFlowWithRequestBuilder(contentType: contentType, initiateFlowRequest: initiateFlowRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Initiate Flow
     - POST /InitiateFlow
     - #### Used to initiate aworkflow of a document.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter initiateFlowRequest: (body) ##### Initiate Flow Request Model (optional)
     - returns: RequestBuilder<InitiateFlowResponse> 
     */
    open class func postInitiateFlowWithRequestBuilder(contentType: String, initiateFlowRequest: InitiateFlowRequest? = nil) -> RequestBuilder<InitiateFlowResponse> {
        let path = "/InitiateFlow"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: initiateFlowRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InitiateFlowResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Initiate Flow No Email
     
     - parameter contentType: (header)  
     - parameter initiateFlowNoEmailRequest: (body) ##### Initiate Flow No Email Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postInitiateFlowNoEmail(contentType: String, initiateFlowNoEmailRequest: InitiateFlowNoEmailRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InitiateFlowNoEmailResponse?, _ error: Error?) -> Void)) {
        postInitiateFlowNoEmailWithRequestBuilder(contentType: contentType, initiateFlowNoEmailRequest: initiateFlowNoEmailRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Initiate Flow No Email
     - POST /InitiateFlow_No_Email
     - #### Used to initiate a workflow without sending out emails.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter initiateFlowNoEmailRequest: (body) ##### Initiate Flow No Email Request Model (optional)
     - returns: RequestBuilder<InitiateFlowNoEmailResponse> 
     */
    open class func postInitiateFlowNoEmailWithRequestBuilder(contentType: String, initiateFlowNoEmailRequest: InitiateFlowNoEmailRequest? = nil) -> RequestBuilder<InitiateFlowNoEmailResponse> {
        let path = "/InitiateFlow_No_Email"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: initiateFlowNoEmailRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InitiateFlowNoEmailResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Initiate Flow No Initial Email
     
     - parameter contentType: (header)  
     - parameter initiateFlowNoInitialEmailRequest: (body) ##### Initiate Flow No Initial Email Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postInitiateFlowNoInitialEmail(contentType: String, initiateFlowNoInitialEmailRequest: InitiateFlowNoInitialEmailRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InitiateFlowNoInitialEmailResponse?, _ error: Error?) -> Void)) {
        postInitiateFlowNoInitialEmailWithRequestBuilder(contentType: contentType, initiateFlowNoInitialEmailRequest: initiateFlowNoInitialEmailRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Initiate Flow No Initial Email
     - POST /InitiateFlow_No_Initial_Email
     - #### Used to initiate a document workflow without an initial email being sent to the user.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter initiateFlowNoInitialEmailRequest: (body) ##### Initiate Flow No Initial Email Request Model (optional)
     - returns: RequestBuilder<InitiateFlowNoInitialEmailResponse> 
     */
    open class func postInitiateFlowNoInitialEmailWithRequestBuilder(contentType: String, initiateFlowNoInitialEmailRequest: InitiateFlowNoInitialEmailRequest? = nil) -> RequestBuilder<InitiateFlowNoInitialEmailResponse> {
        let path = "/InitiateFlow_No_Initial_Email"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: initiateFlowNoInitialEmailRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InitiateFlowNoInitialEmailResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Workflow Sign
     
     - parameter contentType: (header)  
     - parameter workflowSignRequest: (body) ##### Workflow Sign Request Model (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postWorkflowSign(contentType: String, workflowSignRequest: WorkflowSignRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WorkflowSignResponse?, _ error: Error?) -> Void)) {
        postWorkflowSignWithRequestBuilder(contentType: contentType, workflowSignRequest: workflowSignRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Workflow Sign
     - POST /WorkflowSign
     - #### Used to send a request to a user to sign a document workflow.
     - responseHeaders: [Content-Type(String)]
     - parameter contentType: (header)  
     - parameter workflowSignRequest: (body) ##### Workflow Sign Request Model (optional)
     - returns: RequestBuilder<WorkflowSignResponse> 
     */
    open class func postWorkflowSignWithRequestBuilder(contentType: String, workflowSignRequest: WorkflowSignRequest? = nil) -> RequestBuilder<WorkflowSignResponse> {
        let path = "/WorkflowSign"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workflowSignRequest)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WorkflowSignResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
